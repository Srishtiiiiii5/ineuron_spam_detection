from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.feature_extraction.text import CountVectorizer
import logging
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

from joblib import dump, load
# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', filename='spam_detection.log', filemode='a')
logger = logging.getLogger('spam_detection')

cloud_config= {
  'secure_connect_bundle': 'secure-connect-ineuron-project.zip'
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open("ineuron_project-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

row = session.execute("select release_version from system.local").one()
if row:
  logger.info("Connected to Cassandra cluster")
  print(row[0])
else:
  logger.error(f"Failed to connect to Cassandra cluster: {e}")
  print("An error occurred.")
  
keyspace= "spam_detection"
rows = session.execute((
    "SELECT * FROM spam_detection.vector_test"))

df = pd.DataFrame(list(rows))
logger.info("Retrieved data from Cassandra")

df.groupby('v1').describe()

df['spam']=df['v1'].apply(lambda x: 1 if x=='spam' else 0)


X_train, X_test, y_train, y_test = train_test_split(df.v2,df.spam)

from sklearn.pipeline import Pipeline
clf = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('nb', MultinomialNB())
])

print("Test cases are\n")
print(X_test.iloc[0:5])

clf.fit(X_train , y_train)
accuracy = clf.score(X_test,y_test)
print(accuracy)
logger.info(f"Model trained with accuracy: {accuracy}")

y_pred= clf.predict(X_test)
y_true= y_test
precision = precision_score(y_true, y_pred)
recall = recall_score(y_true, y_pred)
f1 = f1_score(y_true, y_pred)
conf_matrix = confusion_matrix(y_true, y_pred)

print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)
print("Confusion Matrix:\n", conf_matrix)

#dump(clf, 'implement.joblib')
